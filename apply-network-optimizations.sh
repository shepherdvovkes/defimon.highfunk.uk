#!/bin/bash

# Network Optimization Application Script for Lighthouse + Ethereum Full Node
# Based on analysis results from network-optimization-analysis.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Network Optimization Application Script ===${NC}"
echo -e "${BLUE}Target: Lighthouse + Ethereum Full Node on Docker${NC}"
echo -e "${BLUE}Current Analysis: 1Gb network with 50+ peers${NC}"
echo ""

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}This script must be run as root (use sudo)${NC}"
        exit 1
    fi
}

# Function to backup current settings
backup_current_settings() {
    echo -e "${YELLOW}Backing up current network settings...${NC}"
    
    BACKUP_FILE="/etc/sysctl.d/backup-network-$(date +%Y%m%d-%H%M%S).conf"
    
    cat > "$BACKUP_FILE" << EOF
# Backup of current network settings - $(date)
# Generated by network optimization script

# Core Memory Parameters
net.core.rmem_max = $(cat /proc/sys/net/core/rmem_max)
net.core.wmem_max = $(cat /proc/sys/net/core/wmem_max)
net.core.rmem_default = $(cat /proc/sys/net/core/rmem_default)
net.core.wmem_default = $(cat /proc/sys/net/core/wmem_default)
net.core.netdev_max_backlog = $(cat /proc/sys/net/core/netdev_max_backlog)
net.core.netdev_budget = $(cat /proc/sys/net/core/netdev_budget)
net.core.netdev_budget_usecs = $(cat /proc/sys/net/core/netdev_budget_usecs)

# TCP Memory Parameters
net.ipv4.tcp_rmem = $(cat /proc/sys/net/ipv4/tcp_rmem)
net.ipv4.tcp_wmem = $(cat /proc/sys/net/ipv4/tcp_wmem)
net.ipv4.tcp_mem = $(cat /proc/sys/net/ipv4/tcp_mem)

# TCP Connection Parameters
net.ipv4.tcp_max_syn_backlog = $(cat /proc/sys/net/ipv4/tcp_max_syn_backlog)
net.ipv4.tcp_max_tw_buckets = $(cat /proc/sys/net/ipv4/tcp_max_tw_buckets)
net.ipv4.tcp_fin_timeout = $(cat /proc/sys/net/ipv4/tcp_fin_timeout)
net.ipv4.tcp_tw_reuse = $(cat /proc/sys/net/ipv4/tcp_tw_reuse)

# TCP Performance Parameters
net.ipv4.tcp_congestion_control = $(cat /proc/sys/net/ipv4/tcp_congestion_control)
net.ipv4.tcp_window_scaling = $(cat /proc/sys/net/ipv4/tcp_window_scaling)
net.ipv4.tcp_timestamps = $(cat /proc/sys/net/ipv4/tcp_timestamps)
net.ipv4.tcp_sack = $(cat /proc/sys/net/ipv4/tcp_sack)
net.ipv4.tcp_fack = $(cat /proc/sys/net/ipv4/tcp_fack)
net.ipv4.tcp_slow_start_after_idle = $(cat /proc/sys/net/ipv4/tcp_slow_start_after_idle)

# TCP Keepalive Parameters
net.ipv4.tcp_keepalive_time = $(cat /proc/sys/net/ipv4/tcp_keepalive_time)
net.ipv4.tcp_keepalive_intvl = $(cat /proc/sys/net/ipv4/tcp_keepalive_intvl)
net.ipv4.tcp_keepalive_probes = $(cat /proc/sys/net/ipv4/tcp_keepalive_probes)

# TCP Retransmission Parameters
net.ipv4.tcp_retries1 = $(cat /proc/sys/net/ipv4/tcp_retries1)
net.ipv4.tcp_retries2 = $(cat /proc/sys/net/ipv4/tcp_retries2)
net.ipv4.tcp_syn_retries = $(cat /proc/sys/net/ipv4/tcp_syn_retries)
net.ipv4.tcp_synack_retries = $(cat /proc/sys/net/ipv4/tcp_synack_retries)

# TCP Buffer Parameters
net.ipv4.tcp_moderate_rcvbuf = $(cat /proc/sys/net/ipv4/tcp_moderate_rcvbuf)
net.ipv4.tcp_adv_win_scale = $(cat /proc/sys/net/ipv4/tcp_adv_win_scale)
EOF

    echo -e "${GREEN}Backup saved to: $BACKUP_FILE${NC}"
}

# Function to create optimization configuration
create_optimization_config() {
    echo -e "${YELLOW}Creating optimization configuration...${NC}"
    
    OPTIMIZATION_FILE="/etc/sysctl.d/99-ethereum-optimization.conf"
    
    cat > "$OPTIMIZATION_FILE" << EOF
# Ethereum + Lighthouse Network Optimization Configuration
# Generated: $(date)
# Target: 1Gb network with 50+ peers
# Applied by: apply-network-optimizations.sh

# ========================================
# CORE NETWORK BUFFER OPTIMIZATIONS
# ========================================

# Increase core memory buffers for high-bandwidth
# Current: 134217728 (128MB) -> Target: 268435456 (256MB)
net.core.rmem_max = 268435456
net.core.wmem_max = 268435456

# Increase default buffer sizes
# Current: 67108864 (64MB) -> Target: 134217728 (128MB)
net.core.rmem_default = 134217728
net.core.wmem_default = 134217728

# Increase network device backlog for high peer count
# Current: 5000 -> Target: 10000
net.core.netdev_max_backlog = 10000

# Optimize network device budget for better throughput
# Current: 300 -> Target: 600
net.core.netdev_budget = 600
net.core.netdev_budget_usecs = 4000

# ========================================
# TCP MEMORY OPTIMIZATIONS
# ========================================

# Optimize TCP receive memory windows
# Current: 4096 87380 67108864 -> Target: 8192 174760 134217728
net.ipv4.tcp_rmem = 8192 174760 134217728

# Optimize TCP send memory windows
# Current: 4096 65536 67108864 -> Target: 8192 131072 134217728
net.ipv4.tcp_wmem = 8192 131072 134217728

# Increase TCP memory limits for high connection count
# Current: 186405 248543 372810 -> Target: 372810 497086 745620
net.ipv4.tcp_mem = 372810 497086 745620

# ========================================
# TCP CONNECTION OPTIMIZATIONS
# ========================================

# Increase connection limits for 50+ peers
# Current: 65536 -> Target: 131072
net.ipv4.tcp_max_syn_backlog = 131072
net.ipv4.tcp_max_tw_buckets = 131072

# Optimize connection cleanup
# Current: 60 -> Target: 30
net.ipv4.tcp_fin_timeout = 30

# Keep current optimal setting
net.ipv4.tcp_tw_reuse = 2

# ========================================
# TCP PERFORMANCE OPTIMIZATIONS
# ========================================

# Keep BBR congestion control (already optimal)
net.ipv4.tcp_congestion_control = bbr

# Keep optimal settings
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1

# Enable FACK for faster recovery
# Current: 0 -> Target: 1
net.ipv4.tcp_fack = 1

# Disable slow start after idle for better performance
# Current: 1 -> Target: 0
net.ipv4.tcp_slow_start_after_idle = 0

# ========================================
# TCP KEEPALIVE OPTIMIZATIONS
# ========================================

# Reduce keepalive overhead for high peer count
# Current: 7200 -> Target: 3600
net.ipv4.tcp_keepalive_time = 3600

# Current: 75 -> Target: 30
net.ipv4.tcp_keepalive_intvl = 30

# Current: 9 -> Target: 3
net.ipv4.tcp_keepalive_probes = 3

# ========================================
# TCP RETRANSMISSION OPTIMIZATIONS
# ========================================

# Optimize retry counts for better reliability
# Current: 3 -> Target: 2
net.ipv4.tcp_retries1 = 2

# Current: 15 -> Target: 10
net.ipv4.tcp_retries2 = 10

# Current: 6 -> Target: 4
net.ipv4.tcp_syn_retries = 4

# Current: 5 -> Target: 3
net.ipv4.tcp_synack_retries = 3

# ========================================
# TCP BUFFER OPTIMIZATIONS
# ========================================

# Keep optimal settings
net.ipv4.tcp_moderate_rcvbuf = 1
net.ipv4.tcp_adv_win_scale = 1

# ========================================
# ADDITIONAL OPTIMIZATIONS
# ========================================

# Enable TCP fast open for better performance
net.ipv4.tcp_fastopen = 3

# Optimize TCP receive buffer auto-tuning
net.ipv4.tcp_moderate_rcvbuf = 1

# Enable TCP selective acknowledgments
net.ipv4.tcp_sack = 1

# Optimize TCP window scaling
net.ipv4.tcp_window_scaling = 1

# Enable TCP timestamps for better performance
net.ipv4.tcp_timestamps = 1

# Optimize TCP memory pressure handling
net.ipv4.tcp_mtu_probing = 1

# Enable TCP auto-corking for better batching
net.ipv4.tcp_autocorking = 1

# Optimize TCP receive buffer auto-tuning
net.ipv4.tcp_moderate_rcvbuf = 1

# Enable TCP receive buffer auto-tuning
net.ipv4.tcp_moderate_rcvbuf = 1
EOF

    echo -e "${GREEN}Optimization configuration created: $OPTIMIZATION_FILE${NC}"
}

# Function to apply optimizations
apply_optimizations() {
    echo -e "${YELLOW}Applying network optimizations...${NC}"
    
    OPTIMIZATION_FILE="/etc/sysctl.d/99-ethereum-optimization.conf"
    
    if [[ -f "$OPTIMIZATION_FILE" ]]; then
        echo -e "${YELLOW}Loading optimization configuration...${NC}"
        sysctl -p "$OPTIMIZATION_FILE"
        
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}Optimizations applied successfully!${NC}"
        else
            echo -e "${RED}Failed to apply some optimizations${NC}"
            return 1
        fi
    else
        echo -e "${RED}Optimization file not found: $OPTIMIZATION_FILE${NC}"
        return 1
    fi
}

# Function to verify applied settings
verify_optimizations() {
    echo -e "${YELLOW}Verifying applied optimizations...${NC}"
    
    echo -e "${BLUE}Key parameter verification:${NC}"
    
    # Check core parameters
    echo "net.core.rmem_max: $(cat /proc/sys/net/core/rmem_max) (target: 268435456)"
    echo "net.core.wmem_max: $(cat /proc/sys/net/core/wmem_max) (target: 268435456)"
    echo "net.core.rmem_default: $(cat /proc/sys/net/core/rmem_default) (target: 134217728)"
    echo "net.core.wmem_default: $(cat /proc/sys/net/core/wmem_default) (target: 134217728)"
    
    # Check TCP parameters
    echo "net.ipv4.tcp_rmem: $(cat /proc/sys/net/ipv4/tcp_rmem)"
    echo "net.ipv4.tcp_wmem: $(cat /proc/sys/net/ipv4/tcp_wmem)"
    echo "net.ipv4.tcp_max_syn_backlog: $(cat /proc/sys/net/ipv4/tcp_max_syn_backlog) (target: 131072)"
    echo "net.ipv4.tcp_fack: $(cat /proc/sys/net/ipv4/tcp_fack) (target: 1)"
    echo "net.ipv4.tcp_slow_start_after_idle: $(cat /proc/sys/net/ipv4/tcp_slow_start_after_idle) (target: 0)"
    
    # Check keepalive parameters
    echo "net.ipv4.tcp_keepalive_time: $(cat /proc/sys/net/ipv4/tcp_keepalive_time) (target: 3600)"
    echo "net.ipv4.tcp_keepalive_intvl: $(cat /proc/sys/net/ipv4/tcp_keepalive_intvl) (target: 30)"
    echo "net.ipv4.tcp_keepalive_probes: $(cat /proc/sys/net/ipv4/tcp_keepalive_probes) (target: 3)"
}

# Function to create Docker optimization recommendations
create_docker_recommendations() {
    echo -e "${YELLOW}Creating Docker optimization recommendations...${NC}"
    
    DOCKER_RECOMMENDATIONS="/tmp/docker-optimization-recommendations.txt"
    
    cat > "$DOCKER_RECOMMENDATIONS" << EOF
# Docker Optimization Recommendations for Ethereum + Lighthouse
# Generated: $(date)

## CONTAINER NETWORK OPTIMIZATIONS:

1. Use host networking for Ethereum node (if security allows):
   docker run --network=host --name ethereum-node [image]

2. Increase Docker daemon file descriptor limits:
   Create /etc/docker/daemon.json:
   {
     "default-ulimits": {
       "nofile": {
         "name": "nofile",
         "hard": 65536,
         "soft": 65536
       }
     }
   }

3. Restart Docker daemon after changes:
   sudo systemctl restart docker

4. Monitor container network performance:
   docker stats [container_name]

5. Consider using --ulimit for individual containers:
   docker run --ulimit nofile=65536:65536 [image]

## MONITORING COMMANDS:

# Check container network usage
docker exec [container] ss -s

# Monitor container resource usage
docker stats

# Check container file descriptors
docker exec [container] cat /proc/sys/fs/file-nr

# Monitor network interface inside container
docker exec [container] cat /proc/net/dev
EOF

    echo -e "${GREEN}Docker recommendations saved to: $DOCKER_RECOMMENDATIONS${NC}"
}

# Function to create monitoring script
create_monitoring_script() {
    echo -e "${YELLOW}Creating network monitoring script...${NC}"
    
    MONITORING_SCRIPT="/tmp/network-monitor.sh"
    
    cat > "$MONITORING_SCRIPT" << 'EOF'
#!/bin/bash

# Network Monitoring Script for Ethereum + Lighthouse
# Run this periodically to monitor network performance

echo "=== Network Performance Monitor ==="
echo "Date: $(date)"
echo ""

echo "--- TCP Connection Count ---"
echo "TCP connections: $(ss -t | wc -l)"
echo "UDP connections: $(ss -u | wc -l)"
echo ""

echo "--- Network Interface Statistics ---"
cat /proc/net/dev | grep -E "(eth0|ens|enp|eno)" | head -3
echo ""

echo "--- Memory Usage ---"
free -h | grep -E "(Mem|Swap)"
echo ""

echo "--- Network Errors ---"
cat /proc/net/netstat | grep -E "(TcpExt|IpExt)" | grep -E "(ListenOverflows|ListenDrops|TCPBacklogDrop|TCPMinTTLDrop)"
echo ""

echo "--- Current Network Parameters ---"
echo "rmem_max: $(cat /proc/sys/net/core/rmem_max)"
echo "wmem_max: $(cat /proc/sys/net/core/wmem_max)"
echo "tcp_max_syn_backlog: $(cat /proc/sys/net/ipv4/tcp_max_syn_backlog)"
echo "tcp_fack: $(cat /proc/sys/net/ipv4/tcp_fack)"
EOF

    chmod +x "$MONITORING_SCRIPT"
    echo -e "${GREEN}Monitoring script created: $MONITORING_SCRIPT${NC}"
}

# Main execution
main() {
    echo -e "${GREEN}Starting network optimization application...${NC}"
    
    # Check if running as root
    check_root
    
    # Backup current settings
    backup_current_settings
    
    # Create optimization configuration
    create_optimization_config
    
    # Apply optimizations
    apply_optimizations
    
    # Verify applied settings
    verify_optimizations
    
    # Create additional recommendations
    create_docker_recommendations
    create_monitoring_script
    
    echo ""
    echo -e "${GREEN}=== Optimization Complete ===${NC}"
    echo -e "${GREEN}All network optimizations have been applied!${NC}"
    echo ""
    echo -e "${BLUE}Next steps:${NC}"
    echo "1. Monitor network performance with: /tmp/network-monitor.sh"
    echo "2. Review Docker recommendations: /tmp/docker-optimization-recommendations.txt"
    echo "3. Restart Docker containers if needed"
    echo "4. Test with your 50+ peers"
    echo ""
    echo -e "${YELLOW}Note: Some changes may require a reboot to take full effect${NC}"
}

# Run main function
main "$@"
